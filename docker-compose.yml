services:
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    env_file: .env
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - POSTGRES_DSN=${POSTGRES_DSN:-postgresql+psycopg://postgres:postgres@postgres:5432/limitforge}
    command: ["sh", "-lc", "PYTHONPATH=/app python -m alembic -c alembic.ini upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000"]
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/v1/health | grep -q ok"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - lfnet

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - lfnet

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-limitforge}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-limitforge}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - lfnet

  # Optional observability (placeholders)
  # prometheus:
  #   image: prom/prometheus:latest
  #   volumes:
  #     - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #   ports:
  #     - "9090:9090"
  #   networks:
  #     - lfnet
  # grafana:
  #   image: grafana/grafana:10.4.0
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - lfnet

volumes:
  redis-data:
  postgres-data:

networks:
  lfnet:
    driver: bridge
